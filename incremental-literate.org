#+TITLE: org-incremental
#+BRAIN_FRIENDS: 1917a9f7-ee66-4023-a0ff-f9e52a0970c1 incremental_reading
#+BRAIN_PARENTS: system literate-projects
#+PRIORITIES: 1 60 30
#+PROPERTY: header-args :noweb yes
# #+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{svg}
#+OPTIONS: tex:t

This package is designed to bring [[https://supermemo.guru/wiki/Incremental_writing][incremental writing]], [[https://help.supermemo.org/wiki/Incremental_mail_processing][incremental mail processing]] and incremental [[http://www.literateprogramming.com/][literate programming]] capabilities to org-mode and Emacs.

It works with [[https://github.com/alphapapa/org-ql][org-ql]] in order to find and generate lists of included files.

Files can be included with a ~#+incremental_writing: t~ header.

Key functions we would need:
- A-factor
- Priority
- Postpone/Reschedule (Intra- and inter-day)
- Dismissing (of files and sub-headers)
- Mercy
- TODO keywords: ("to write", "to expand", "to rewrite", "to review", "finished")
- Statistical analysis to chart the progress through the writing material (~magit~ and ~calendar~)
- Outstanding headline sorting by priority to match circadian cycles (high for high alertness and low for end of day)

Features:

  + *Incremental writing of email with ~mu4e~!*
  + *Incremental literate programming* with org-mode and SM's algorithm!
- Deadline awareness (modify priority/a-factor/scheduled date based on distance to deadline)

* Overview
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:38]
:ID:       a981430d-1319-4d5a-b036-c1478fdf7cd4
:END:

** TODO Why incremental writing?
:PROPERTIES:
:CREATED:  [2021-07-26 Mon 17:42]
:ID:       d334935e-79f3-4c5d-a614-61f902e6ecb9
:END:

Incremental writing is a concept co-developed by Piotr Wozniak and [[https://supermemopedia.com/wiki/How_I_use_creative_elaboration_with_the_help_of_incremental_reading][users of Supermemo]] employing the topic spacing feature to break writing projects into sub-chapters, as a form of creative elaboration.

Woz [[http://help.supermemo.org/wiki/Creativity_and_problem_solving_in_SuperMemo#Incremental_writing][writes]]:
#+begin_quote
(Texts)... may be bloated and repetitive, however, with incremental reading, they can be prioritized in a rational way. *Incremental writing leaves the texts highly granular and the flow of thought is jagged*, however ... this is an advantage as all individual articles and subarticles *carry sufficient local context to be read independently*.
#+end_quote

The above relates to the granularity of articles written using IW lending itself to IR as extracts tend to be discrete. In the context of incremental literate programming, I believe the contextualisation provided by prose encapsulated in subheadings offer these same advantages while also then allowing us to use the spacing effect over blocks of code. Org-mode's narrowing and widening features further help to constrain or expand context in the flow of IW.


* Topic spacing algorithm
:PROPERTIES:
:CREATED:  [2021-07-23 Fri 17:53]
:ID:       b58fcb07-0654-4120-a26a-0347c41b621b
:END:

In short, the basic algo for spacing topics is here:

#+begin_src example
(Interval=OldInterval*AFActor)
#+end_src

- The first metric is self explanatory, but ~A-factor~ [fn:1] (standing for /absolute difficulty factor/) is more complicated in that it is used in older versions (<SM18) of Supermemo to represent element difficulty. It is still used for topics but not items in the current version.

The base value for ~A-factor~ in Supermemo is =2=, and so in essence the algo is simply a doubling mechanism:

#+begin_src elisp :noweb-ref a-factor value
(defcustom a-factor 2.0
  "Base a-factor value as per Supermemo defaults"
  :type 'float
  :group 'org-incremental)
#+end_src

As review spacings this is a simple geometric sequence ($x_n=ar^{(n-1)$) with =2= as the common ratio:

#+begin_src lua :noweb yes :noweb-ref geometric sequence lua :results output
local sequence = {}
function GeoSeq (a, r, n)
   for i = 1, n do
   x = a * r^(i-1)
   sequence[#sequence+1] = x
   end
   return x
end

function print_seq (a, r, n)
  GeoSeq(a, r, n)
  for index, value in ipairs(sequence) do
    print(value)
    -- tex.print(math.floor(value))
  end
end
#+end_src

#+RESULTS:

#+begin_src lua :noweb yes :results output pp
«geometric sequence lua»
print_seq(1, 2, 5)
#+end_src

#+RESULTS:
: 1.0
: 2.0
: 4.0
: 8.0
: 16.0

#+NAME: geo-progression
#+HEADER: :headers '("\\usepackage{tikz}" "\\usepackage{luacode}")
#+BEGIN_SRC latex :results graphics file :file img/progression.png :noweb yes :tangle test.tex
% \pgfsetxvec{\pgfpoint{1.5cm}{0cm}}
\begin{luacode}
  «geometric sequence lua»

function print_seq (a, r, n)
  GeoSeq(a, r, n)
  tex.print("")
  for index, value in ipairs(sequence) do
  tex.print(math.floor(value)..[[, ]])
  tex.print("")
  end
end

\end{luacode}

\newcommand\printseqq[3]{\directlua{print_seq(#1,#2,#3)}}

% \printseqq{1}{2}{5}
\begin{tikzpicture}[scale = 0.4]
  \node[above] {$\dfrac{x_n=1 x 2^{(n-1)}$};
  \\
  \draw[latex-latex] (0,0) -- (21,0);
  % \foreach \x in \printseq{1}{2}{5}
  % \draw[->={(\x,0)}, bend left] node [right];
  \foreach \x in {0,...,21}
  \draw[shift={(\x,0)},color=black] (0pt,0pt) -- (0pt,-2pt) node[below]
  {$\x$};
\end{tikzpicture}
#+end_src

#+RESULTS: geo-progression
[[file:img/progression.png]]

These results are then sorted by priority, a user defined variable at the core of both incremental reading and writing.

It should be noted that a key tool in the process is occasionally micromanaging interval lengths, which might grow at an undesirable rate for important articles and thus needs to be manually shortened from time to time.

** Topic spacing algorithm in Elisp
:PROPERTIES:
:CREATED:  [2021-08-31 Tue 15:05]
:ID:       5a4ff6c0-c4a6-4d44-8fdc-aeb488fedaff
:END:

Instead of re-implementing a geometric sequence directly, we'll copy SM's simple function and have our code act off of repetition data written to the ~:PROPERTIES:~ drawer.

In the functional style the interval determining algorithm:
- We use =round= here because human work days are measured in real days, which means we have a full circadian cycle between reps.

#+begin_src elisp :noweb-ref spacing algo
(defun org-incremental-determine-next-interval (old-interval a-factor)
  "Calcuate new interval for current headline.
Uses: (Interval=OldInterval*AFactor)"
  (let ((next-interval (* old-interval a-factor)))
    (round next-interval)))
#+end_src

** TODO [#2] Store element data externally?                         :incremental:
SCHEDULED: <2022-07-31 Sun>
:PROPERTIES:
:CREATED:  [2021-11-30 Tue 18:58]
:ID:       3e1b81b4-ffb9-4bb2-9106-7cd2ec96fb06
:END:

Maybe use ~org-roam's~ dual model - mirror header information in a db which can be accessed for generating views etc.

* Scheduler
:PROPERTIES:
:CREATED:  [2021-08-31 Tue 18:15]
:ID:       e02e162b-2845-4dd2-9e09-b40792302541
:END:

#+begin_src elisp
(defvar org-incremental-scheduling-properties
  '("LAST_INTERVAL" "TOTAL_REPEATS" "LAST_REVIEWED" "A-FACTOR"))
#+end_src

Apply the base algorithm to existing ~:PROPERTIES:~ keys and then write the new interval, moving the previous interval into the "=OLD_INTERVAL=" key.
The element is rescheduled using ~org~'s internal =org-schedule= function which will be used later for building and sorting a que.
#+begin_src elisp :noweb-ref element rescheduler
(defun org-incremental-smart-reschedule ()
  (interactive)
  (let* ((old-interval (org-entry-get (point) "NEW_INTERVAL"))
         (a-factor (org-entry-get (point) "A-FACTOR")))
    (setq new-interval (apply 'determine-next-interval ;; not sure if apply is the best way
                              (mapcar #'string-to-number `(,old-interval ,a-factor))))
    (org-entry-put (point) "NEW_INTERVAL" (prin1-to-string new-interval))
    (org-schedule nil (time-add (current-time)
                                (days-to-time
                                 new-interval)))
    (org-entry-put (point) "OLD_INTERVAL" old-interval)
    (org-set-property "LAST_REVIEWED"
                      (org-incremental-time-to-inactive-org-timestamp (current-time)))))
#+end_src

** TODO [#20] Store item data externally?                        :incremental:
:PROPERTIES:
:CREATED:  [2021-11-30 Tue 18:58]
:ID:       3e1b81b4-ffb9-4bb2-9106-7cd2ec96fb06
:END:
Maybe use ~org-roam's~ dual model - mirror header information in a db which can be accessed for generating views etc.
** resources
:PROPERTIES:
:CREATED:  [2022-03-26 Sat 12:31]
:ID:       08b151d6-e27e-495d-8d3a-e17752d4cd3d
:END:
Some documentation for the incremental writing algorithm can be found at:
- https://help.supermemo.org/wiki/Creativity_and_problem_solving_in_SuperMemo#Incremental_writing_algorithm
- https://supermemopedia.com/wiki/SM_Algorithm_for_topics_%3F
- http://supermemopedia.com/wiki/How_was_the_topic_algorithm_created%3F
- http://supermemopedia.com/wiki/ABC_of_incremental_reading_for_any_user_of_spaced_repetition
- https://supermemo.guru/wiki/A-Factor

Existing SRS algorithms in Emacs:
- https://github.com/emacsmirror/org-contrib/blob/master/lisp/org-learn.el
- https://gitlab.com/phillord/org-drill
- https://github.com/l3kn/org-fc
- https://github.com/abo-abo/pamparam

Other implementations:
https://github.com/bjsi/incremental-writing/blob/master/src/scheduler.ts

* Various schedule functions
:PROPERTIES:
:CREATED:  [2021-08-31 Tue 18:15]
:ID:       e02e162b-2845-4dd2-9e09-b40792302541
:END:
Bring in some functionality for interacting with the ~:PROPERTIES:~ drawer.
Much of this is refactored code lifted from [[https://gitlab.com/phillord/org-drill/-/blob/master/org-drill.el][org-drill]].

#+begin_src elisp
(defun org-incremental-time-to-inactive-org-timestamp (time)
  "Convert TIME into org-mode timestamp."
  (format-time-string
   (concat "[" (substring (cdr org-time-stamp-formats) 1 -1) "]")
   time))
#+end_src

#+begin_src elisp
(defun org-incremental-days-since-last-review ()
  "Nil means a last review date has not yet been stored for
the item.
Zero means it was reviewed today.
A positive number means it was reviewed that many days ago.
A negative number means the date of last review is in the future --
this should never happen."
  (let ((datestr (org-entry-get (point) "LAST_REVIEWED")))
    (when datestr
      (- (time-to-days (current-time))
         (time-to-days (apply 'encode-time
                              (org-parse-time-string datestr)))))))
#+end_src

#+begin_src elisp
(defun org-incremental-entry-total-repeats (&optional default)
  "Return the SM total number of repeats for the entry at point."
  (let ((val (org-entry-get (point) "TOTAL_REPEATS")))
    (if val
        (string-to-number val)
      (or default 0))))
#+end_src

#+begin_src elisp
(defun org-incremental-entry-p (&optional marker)
  "Is MARKER, or the point, in an 'incrementalised item'? This will return nil if
the point is inside a subheading of an incremental item -- to handle that
situation use `org-part-of-drill-entry-p'."
  (save-excursion
    (when marker
      (org-drill-goto-entry marker))
    (member org-drill-question-tag (org-get-tags nil t))))
#+end_src

#+begin_src elisp
(defun org-incremental-entry-new-p ()
  "Return non-nil if the entry at point is new."
  (and (org-incremental-entry-p)
       (let ((item-time (org-get-scheduled-time (point))))
         (null item-time))))
#+end_src

We need to introduce checks for valid A-factor and interval values.

#+begin_src elisp
(assert (>= 2 2))
#+end_src

#+RESULTS:

We can piggy back off of some more ~org~ functions:
- =org-default-priority= (30 in this case, with min being 60 and max 1)
-


* org-ql prototyping
:PROPERTIES:
:CREATED:  [2021-07-23 Fri 16:51]
:ID:       35274ebc-b6d0-41e4-bf68-7749b96f34d2
:END:

Here we create a test function to bring up an agenda-like view of tasks. Due (and overdue) items from the ~org-todo-keywords-for-agenda~ list with the =incremental= tag are sorted by priority and date.

*Note that sorting numerical priorities does not seem to be working in ~org-ql~. See the relevant [[https://github.com/alphapapa/org-ql/issues/274][issue]].

#+begin_src elisp
(org-ql-search (org-agenda-files)
  '(and (todo)
        (tags "incremental"))
  :sort '(priority scheduled)
  :title "Incremental Items")
#+end_src

#+end_src

* Test bed
:PROPERTIES:
:CREATED:  [2021-07-23 Fri 16:57]
:ID:       72cbe9b1-43fc-4e57-a337-36de3a25ae63
:END:

** [#30] example item
SCHEDULED: <2021-09-04 Sat>
:PROPERTIES:
:ID:       dd92c87d-4407-4938-8472-a06b3882f7aa
:A-FACTOR: 2
:OLD_INTERVAL: 2
:TOTAL_REPEATS: 2
:LAST_REVIEWED: [2021-08-31 Mon 15:12]
:NEW_INTERVAL: 4
:END:

This is a test IW item.

** UI
:PROPERTIES:
:CREATED:  [2021-07-26 Mon 17:46]
:ID:       e3f797e1-ab65-40b7-8be4-b6f283851f95
:END:
[[orgit-rev:~/org/org-brain/projects/org-incremental/::test-branch][~/org/org-brain/projects/org-incremental/ (magit-rev test-branch)]]

[[orgit-rev:~/org/org-brain/projects/org-incremental/::347e6ff61ae9745e52d7e562d777a64f0e1a331e][~/org/org-brain/projects/org-incremental/ (magit-rev 347e6ff)]]

* Notes
:PROPERTIES:
:CREATED:  [2022-07-29 Fri 11:15]
:ID:       6bc70751-cc03-4d48-ad29-acd906f43f08
:END:

[fn:1] :: As it stands the value of the A-factor is not necessarily optimised to make use of the spacing effect. By Woz's own admission the current topic algorithm mostly serves as an obsolescence protocol, to push articles further and further out, and thus relies on user intervention in the form of modifying priorities (this is in-line with the current model) and micromanaging interval rescheduling. The latter is not too painful but we could likely be smarter about this.

* Resources
:PROPERTIES:
:CREATED:  [2022-03-26 Sat 12:31]
:ID:       08b151d6-e27e-495d-8d3a-e17752d4cd3d
:END:

Some documentation for the incremental writing algorithm can be found at:
- https://help.supermemo.org/wiki/Creativity_and_problem_solving_in_SuperMemo#Incremental_writing_algorithm
- https://supermemopedia.com/wiki/SM_Algorithm_for_topics_%3F
- http://supermemopedia.com/wiki/How_was_the_topic_algorithm_created%3F
- http://supermemopedia.com/wiki/ABC_of_incremental_reading_for_any_user_of_spaced_repetition
- https://supermemo.guru/wiki/A-Factor

Existing SRS algorithms in Emacs:
- https://github.com/emacsmirror/org-contrib/blob/master/lisp/org-learn.el
- https://gitlab.com/phillord/org-drill
- https://github.com/l3kn/org-fc
- https://github.com/abo-abo/pamparam

Other implementations:
https://github.com/bjsi/incremental-writing/blob/master/src/scheduler.ts

* Files
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:45]
:ID:       7f0e3ea9-aca0-4df4-add7-cc63f111f40d
:END:

** org-incremental/org-incremental.el
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:52]
:ID:       0bbb98b5-df68-41d9-a16d-54099acb3d0f
:END:
#+begin_src elisp :mkdirp yes :noweb yes :tangle org-incremental.el
;;; org-incremental.el --- Incremental Writing System for Emacs org-mode -*- lexical-binding: t; -*-

;; Copyright (C) 2021 Daniel Otto

;; Author: Daniel Otto
;; Package-requires: ((emacs "26.3") (org "9.4"))

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; Incremental writing for org-mode
;;
;;; Code:

(require 'org-incremental-core)
#+end_src

** org-incremental/org-incremental-core.el
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:57]
:ID:       c84e5ad7-9be6-4083-bfec-ae662ceb0005
:END:
#+begin_src elisp :mkdirp yes :noweb yes :tangle org-incremental-core.el
#+end_src

** org-incremental/org-incremental-scheduler.el
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:52]
:ID:       b135bb8c-53c6-4fe2-b78a-22d7f3e89511
:END:
#+begin_src elisp :mkdirp yes :noweb yes :tangle org-incremental-scheduler.el
«a-factor value»
#+end_src

** org-incremental/org-incremental-hydra
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:52]
:ID:       c107d6a7-0639-427c-ae3e-2030d2173936
:END:
** org-incremental/org-incremental-analysis
:PROPERTIES:
:CREATED:  [2021-09-08 Wed 21:52]
:ID:       dd022a74-bfc0-4ce0-9b38-f9be59be2375
:END:
* COMMENT local variables
:PROPERTIES:
:CREATED:  [2021-08-17 Tue 22:49]
:ID:       e99d9699-e0df-4736-b63f-cb6a9ced3142
:END:
# Local Variables:
# org-babel-noweb-wrap-start: "«"
# org-babel-noweb-wrap-end: "»"
# End:
